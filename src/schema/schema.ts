
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity, getStore, UpdateValues } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'

export enum PositionType {
  Collateral = "Collateral", Supply = "Supply", Borrow = "Borrow"
}





interface PositionStateConstructorInput {
  id: ID;
  address: String;
  type: PositionType;
  updatedAt: BigInt;
  balance: BigDecimal;
}
@Entity("PositionState")
export class PositionState extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	address: String

	@Required
	@Column("String")
	type: PositionType

	@Required
	@Column("BigInt")
	updatedAt: BigInt

	@Required
	@Column("BigDecimal")
	balance: BigDecimal
  constructor(data: PositionStateConstructorInput) {super()}
  
  
  static update(values: UpdateValues<PositionStateConstructorInput>): Promise<void> {
    return getStore().update(PositionState, values)
  }
}


const source = `enum PositionType {
  Collateral
  Supply
  Borrow
}

type PositionState @entity {
  id: ID!
  address: String!
  type: PositionType!
  updatedAt: BigInt!
  balance: BigDecimal!
}
`
DatabaseSchema.register({
  source,
  entities: {
    "PositionState": PositionState
  }
})
